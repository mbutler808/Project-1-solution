---
title: "An example cleaning script"
author: "Marguerite Butler"
date: "2023-02-15"
output: html_document
---


# Processing script (data cleaning)

This Quarto document contains the same code and comments/information as `processingcode.R`. However, this demonstrates how to embed the code and text into a single Quarto file. 

Some people, after they get comfortable with coding in R and writing markdown, prefer to skip the script step and develop their code directly in a markdown file. This is practical for smaller projects or projects that are very similar to previous projects. 

Others prefer to have an R script and draw from the code into the markdown document (see v2).  When youʻre deep in coding, it can be easier to work with the code without all the text in between. See the other Quarto file (v2) for my currently preferred approach of pulling code from the R script into the Quarto file via code chunk labels.


# Setup

Load needed packages. make sure they are installed.

```{r}
require(dplyr) #for data processing/cleaning
require(tidyr) #for data processing/cleaning
require(skimr) #for nice visualization of data 
```


# Data loading

Start R in the same directory that this script resides in `project_root/Code/Processing_code`.  If you need to check your working directory, use `getwd()`.

Either restart R in the correct directory, or navigate to it 
with `setwd(...relative path to the correct directory...)`. 

**NEVER** put a `setwd()` inside your code, it is bad ettiquite as it probably wonʻt work for anyone else. 

```{r}
# path to data
# note the use of relative and not absolute paths

data_location <- "../../Data/Raw_data/penguins_raw_dirty.csv"
data_path <- "../../Data/Raw_data/"
```

### Load data

I am using `check.names=F` because these names have spaces and parentheses and I want to preserve the original names.

```{r}
rawdata <- read.csv(data_location, check.names=FALSE)
```


# Check data

We can look in the data dictionary for a variable explanation
I am using the paste function here to add the path to the filename. `sep=""` adds no space when pasting. I could have also just saved the complete path to the file and saved 
it as `dictonary_path`. It is up to you. 

```{r}
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))
print(dictionary)
```


### There are several ways of looking at the data

Note that for functions that come from specific packages (instead of base R) I often specify both package and function like so `package::function()`.  That's not required, one could just call the function after loading the package.  Specifying the package makes it clearer which package the function comes from, but adds a little extra typing. You can do it either way.


```{r}
dplyr::glimpse(rawdata)
summary(rawdata)
head(rawdata)
skimr::skim(rawdata)
```

See all the data by just typing `rawdata` at the R console.

Note that the names in the penguin dataset have spaces and () which are usable, but force us to quote the character strings. You can either keep doing so rawdata$`Culmen Length (mm)` or rename to something more convenient.

Personally I would probably shorten everything, but to keep it more recognizable for this exercise, I will do both - make a shorter `new_names` and save a vector `orig_names` which are convenient for plotting axis labels. Iʻll name the `orig_names` by the `new names` so I donʻt have to remember the original names! Itʻs up to you how you deal with this.  

```{r}
orig_names <- names(rawdata)
new_names <- c("study", "sampleN", "species", "region", "island", "stage", "id", "clutch", "eggdate", "culmenL", "culmenD", "flipperL", "mass", "sex", "d15N", "d13C", "comments" )
names(orig_names) <- new_names   # label the original names vector with the new names
                              # useful for plot axis labels
orig_names                          
```

# Cleaning

Inspecting the data, we find some problems that need addressing. 

###  Species names

First, we know that this is a dataset for three species of penguin, but we notice that there are 9 unique species.

```{r}
#check skimr or 
unique(rawdata$Species)
```

Notice that some of the species names have typos? Letʻs save rawdata as d1, and modify d1 so we can compare versions. 

```{r}
d1 <- rawdata
names(d1) <- new_names   # rename the data with short names
```

Use the techniques we learned in class to fix these errors. For example, we can find the mispelled entry, and replace the whole thing:

```{r}
ii <- grep("PengTin", d1$species)
d1$species[ii] <- "Adelie Penguin (Pygoscelis adeliae)"
```

Another way:

```{r}
d1$species <- sub("gTin", "guin", d1$species)
unique(d1$species)   # look at partially fixed data again  
```

### Fix all of the typos in species name 

```{r}
d1$species <- sub("gufn", "guin", d1$species)
d1$species <- sub("Oguin", "nguin", d1$species)
d1$species <- sub("Kie", "lie", d1$species)
d1$species <- sub("lieM", "lie ", d1$species)
d1$species <- sub("Vent", "Gent", d1$species)
unique(d1$species)     
```

Also, letʻs shorten Species just keeping the three common names "Adelie", "Gentoo", and "Chinstrap" and delete the rest of the Species character string. 

```{r}
d1$species <- sub(" Penguin (Pygoscelis adeliae)","", d1$species, fixed=T)
d1$species <- sub(" penguin (Pygoscelis papua)","", d1$species, fixed=T)
d1$species <- sub(" penguin (Pygoscelis antarctica)","", d1$species, fixed=T)

unique(d1$species)
```

### Continuous data

There is an entry for `Culmen Length (mm)` which says "missing" instead of a number or NA. 
Fix by changing culmen length entry to NA.

```{r}
cl <- d1$culmenL # OK so typing long names is really annoying. 
                              # Letʻs make a temporary variable `cl` and save it 
                              # back to d1$`Culmen Length (mm)` when weʻre done. 

cl[ cl == "missing" ] <- NA  # find cl=="missing and replace "missing" with NA
cl <- as.numeric(cl)  # coerce to numeric
d1$culmenL <- cl
```

Another way using `dplyr` from the tidyverse:

```{r eval=F}
d1 <- rawdata %>% dplyr::filter( culmenL != "missing" ) %>% 
             dplyr::mutate( culmenL = as.numeric(culmenL))
```

Look at partially fixed data again

```{r}
skimr::skim(d1)
hist(d1$culmenL)
```

Letʻs also do a bivariate plot with mass
```{r}
plot(d1$mass, d1$culmenL)
```

Notice anything funny? 

Now we see that there are three penguins with really really long culmens (300+mm) that could be typos. If we don't know, we might need to remove these penguins. But let's suppose that we somehow know that this is because of a misplaced decimal point (for example if we could verify with field records), and letʻs fix this:

```{r}
d2 <- d1 
cl[ cl > 300 ] 
```

Notice that NAʻs will match the condition `cl>300`, because we donʻt really know, so R returns it to be conservative. We donʻt want NAs, so letʻs exclude them with 
!is.na()  where the ! is "not" or the opposite of is.na. 
The logical & which requires both conditions to be true (i.e., I want to be rich AND famous):

```{r}
cl[ !is.na(cl) & cl>300 ]
```

Now replace with the same divided by 10:

```{r}
cl[ !is.na(cl) & cl>300 ] <- cl[ !is.na(cl) & cl>300 ]/10  

d2$culmenL <- cl
```

Culmen length values seem ok now

```{r}
skimr::skim(d2)
hist(d2$culmenL)

plot(d2$mass, d2$culmenL, xlab=orig_names["mass"], ylab=orig_names["culmenL"])
```

Look better?

### Now let's look at body mass.

There are penguins with body mass of <100g when the others are over 3000. 
Perhaps these are new chicks? But they are supposed to be adults. Letʻs remove them.

```{r}
hist(d2$mass)
```

Mass is the main size variable, so we will probably need to remove the individuals with missing masses in order to  be able to analyze the data. 

Note: Some analysis methods can deal with missing values, so it's not always necessary. Or it may be fine to have it in some of the variables but probably not the size variable. 
This should be adjusted based on your planned analysis approach. 

```{r}
d3 <- d2
mm <- d3$mass

mm[ mm < 100 ] <- NA       # replace tiny masses with NA
nas <- which( is.na(mm) )  # find which rows have NA for mass

d3 <- d3[ -nas, ]   # drop the penguins (rows) with missing masses

skimr::skim(d3)
hist(d3$mass)

plot(d3$mass, d3$culmenL, xlab=orig_names["mass"], ylab=orig_names["culmenL"])
```

Does it look better?

### Factors

We also want to have Species, Sex, and Island coded as a categorical/factor variable:

```{r}
d3$species <- as.factor(d3$species)
d3$sex <- as.factor(d3$sex)
d3$island <- as.factor(d3$island)  
skimr::skim(d3)
```

# Bivariate Plots

Make bivariate plots for any remaining continous data to ensure there are no further errors. It is a good check on the distribution of the data as well. 

```{r}
# bivariate plots of each numeric variable with mass to ensure there are no further
# errors.:
names(d3) <- new_names
plot(d3$mass, d3$culmenL, xlab=orig_names["mass"], ylab=orig_names["culmenL"])
plot(d3$mass, d3$culmenD, xlab=orig_names["mass"], ylab=orig_names["culmenD"])
plot(d3$mass, d3$flipperL, xlab=orig_names["mass"], ylab=orig_names["flipperL"])
plot(d3$mass, d3$d15N, xlab=orig_names["mass"], ylab=orig_names["d15N"])
plot(d3$mass, d3$d13C, xlab=orig_names["mass"], ylab=orig_names["d13C"])
```

Make histograms or densities of at least mass by discrete category, to check for any potential category errors, extra categories, etc.  

You should look through all of the data, variable by variable, or by pairs of variables.

```{r}
# We will not subset by region, stage as they have only 1 value
# nor eggdate and sampleN which have many values

require(ggplot2)
hist(d3$mass)   # a single histogram of mass

d3 %>%   # mass histogram by species
    ggplot( aes(x=mass)) + 
   geom_histogram( aes(fill=species), alpha=.5) 
 
d3 %>%    # mass density by species
    ggplot( aes(x=mass)) + 
   geom_density( aes(fill=species), alpha=.5) 
 
d3 %>%    # by island
    ggplot( aes(x=mass)) + 
    geom_histogram( aes(fill=island), alpha=.5)   

d3 %>% 
    ggplot( aes(x=mass)) + 
    geom_density( aes(fill=island), alpha=.5)   

d3 %>% 
    ggplot( aes(x=mass)) + 
    geom_histogram( aes(fill=clutch), alpha=.5)   

d3 %>% 
    ggplot( aes(x=mass)) + 
    geom_density( aes(fill=clutch), alpha=.5)   

d3 %>% 
    ggplot( aes(x=mass)) + 
    geom_histogram( aes(fill=sex), alpha=.5)   

d3 %>% 
    ggplot( aes(x=mass)) + 
    geom_density( aes(fill=sex), alpha=.5)   
```

# Finalize your cleaned dataset. 

Drop variables (columns) we wonʻt analyze.  

```{r}
vars <- c("id", "species", "island", "clutch", "eggdate", "culmenL", "culmenD", "flipperL", "mass", "sex", "d15N", "d13C")

d4 <- d3[vars]   # save only the variables in vars
names(d4) <- orig_names[vars]  # revert to original names
print(orig_names[vars])

dictionary <- dictionary[dictionary$variable %in% orig_names[vars],]  # drop unused variables

# another way to drop unused rows: 
dictionary <- dictionary %>% filter( variable %in% orig_names[vars] )  # dplyr

print(dictionary)
```

# Save data

All done, data is clean now. 
Let's assign at the end to some final variable
makes it easier to add steps above

```{r}
processeddata <- d4      # cleaned data
```

Finally, save the clean data as RDS file as well as a copy as .csv

Location to save file:

```{r}
save_data_location <- "../../Data/Processed_data/processeddata.rds"
saveRDS(processeddata, file = save_data_location)

save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"
```

I will use the version 2 quarto file, so I will comment it out here:
```{r}
## write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
```


